<templateSet group="Android">
    <template name="RecyclerViewWithListAdapter"
              description="RecyclerView with ListAdapter"
              toReformat="false" toShortenFQNames="true"
              value="override fun setUpViews() {&#10;&#10;        val registrationsAdapter = RegistrationsAdapter()&#10;        registrationsRecyclerView.layoutManager = LinearLayoutManager(this, RecyclerView.VERTICAL, false)&#10;        registrationsRecyclerView.adapter = registrationsAdapter&#10;&#10;        viewModel.getRegistrations().observe(this, Observer { registrations -&gt;&#10;            registrations?.let {&#10;                registrationsLoadingView.setLoading(false)&#10;                emptyViewRegistrations.visibility = if (registrations.data?.isEmpty() == true) View.VISIBLE else View.INVISIBLE&#10;&#10;                registrationsAdapter.submitList(registrations.data)&#10;                when (it.status) {&#10;                    Resource.Status.SUCCESS -&gt; {&#10;                    }&#10;                    Resource.Status.ERROR -&gt; {&#10;                        it.errorMessage?.let { showError(it) }&#10;                    }&#10;                    Resource.Status.LOADING -&gt; {&#10;                        registrationsLoadingView.setLoading(true)&#10;                    }&#10;                }&#10;            }&#10;        })        &#10;    }  &#10;&#10;&#10;    inner class RegistrationsAdapter : ListAdapter&lt;Registration, RegistrationsAdapter.ViewHolder&gt;(RegistrationDiffCallback()) {&#10;        &#10;        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;            val view = LayoutInflater.from(parent.context).inflate(R.layout.cell_registration, parent, false)&#10;            return ViewHolder(view)&#10;        }&#10;&#10;        override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;            holder.bindTo(getItem(position))&#10;        }&#10;&#10;        fun getSelectedRegistration(): Registration? {&#10;            return selectedRegistration&#10;        }&#10;&#10;        inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {&#10;            init {&#10;                //itemView.setOnClickListener {}&#10;            }&#10;&#10;            fun bindTo(registration: Registration) {&#10;                //itemView.xxxTextView.text = registration.registration                &#10;            }&#10;        }&#10;    }&#10;&#10;    class RegistrationDiffCallback : DiffUtil.ItemCallback&lt;Registration&gt;() {&#10;        override fun areItemsTheSame(oldItem: Registration?, newItem: Registration?): Boolean {&#10;            return oldItem?.id == newItem?.id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItem: Registration?, newItem: Registration?): Boolean {&#10;            return oldItem?.driver == newItem?.id&#10;        }&#10;    }">
        <context>
            <option name="KOTLIN" value="true"/>
        </context>
    </template>
</templateSet>